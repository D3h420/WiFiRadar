#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ESP8266WiFi.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

// OLED podłączony do Wemos D1 Mini:
// - SDA: D2 (GPIO 4)
// - SCL: D1 (GPIO 5)
// - VCC: 3.3V lub 5V (zależnie od modułu OLED)
// - GND: GND
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

// Placeholder for full-screen 128x64 bitmap logo (generated with Horizontal - 1 bit per pixel)
const unsigned char wifi_logo [] PROGMEM = {
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x7f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x03, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x0f, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x1f, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x05, 0x00, 0x0f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x3c, 0x03, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x00, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x3c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0e, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0xfe, 0x00, 0x00, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xfe, 0x00, 0x00, 0x7f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x9f, 0x00, 0x00, 0xf3, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x0b, 0x80, 0x00, 0xc7, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x01, 0x80, 0x01, 0x88, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x40, 0x01, 0x00, 0xdc, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00, 0x00, 0x8c, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0xe0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x03, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x01, 0xe0, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0xc0, 0x7f, 0xff, 0xff, 0xff, 0x81, 0x70, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x07, 0x40, 0xff, 0xff, 0xe0, 0x00, 0xc0, 0x78, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0xc0, 0x00, 0x00, 0x00, 0xc0, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3f, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x80, 0x3c, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x3c, 0x00, 0xc0, 0x00, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x7f, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x3e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0x80, 0x40, 0x00, 0x00, 0x00, 0x80, 0x0e, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0xff, 0x00, 0x40, 0x00, 0x00, 0x00, 0x80, 0x1f, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x01, 0xe3, 0xf0, 0x40, 0x00, 0xc0, 0x00, 0x80, 0x7f, 0x80, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x3e, 0x40, 0x05, 0xe0, 0x00, 0x81, 0xf8, 0x40, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x40, 0x01, 0xe0, 0x00, 0x8f, 0xfc, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x01, 0xe0, 0x00, 0x00, 0xe4, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc8, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 1040)
const int wifi_logoallArray_LEN = 1;
const unsigned char* wifi_logoallArray[1] = {
	wifi_logo
};


// Funkcja do przeliczania RSSI na odległość (w metrach)
float rssiToDistance(int rssi) {
  return pow(10, (27.55 - (20 * log10(2400)) + abs(rssi)) / 20.0);
}

// Struktura do przechowywania informacji o sieci Wi-Fi
struct WiFiInfo {
  String ssid;
  int rssi;
  float distance;
};

// Struktura do przechowywania stanu kolumny animacji Matrix
struct MatrixColumn {
  int x;        // Pozycja x kolumny
  float y;      // Pozycja y znaku
  char symbol;  // Aktualny znak
  float speed;  // Prędkość opadania (piksele na klatkę)
};

WiFiInfo networks[6];  // Tablica na maksymalnie 6 sieci
MatrixColumn columns[12]; // Tablica na 12 kolumn animacji Matrix

// Funkcja generująca losowy znak (cyfry, litery, znaki specjalne)
char getRandomChar() {
  const char charSet[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$%^&*";
  return charSet[random(0, strlen(charSet))];
}

// Inicjalizacja kolumn animacji Matrix
void initMatrix() {
  for (int i = 0; i < 12; i++) {
    columns[i].x = i * 10 + random(0, 6); // Rozmieszczenie co ~10 pikseli
    columns[i].y = random(-SCREEN_HEIGHT, 0); // Start poza ekranem
    columns[i].symbol = getRandomChar();
    columns[i].speed = random(10, 50) / 10.0 + 1.0; // Prędkość 1-2 piksele/klatka
  }
}

// Funkcja animacji Matrix
void matrixAnimation() {
  unsigned long startTime = millis();
  // Wyświetlanie nagłówka i footera
  display.clearDisplay();
  display.setTextSize(2); // Większa czcionka dla "WiFi Radar"
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(4, 0); // Centrowanie: (128 - 120) / 2 = 4
  display.println("WiFi Radar");
  display.setCursor(5, 0); // Przesunięcie o 1 piksel dla efektu pogrubienia
  display.println("WiFi Radar");
  // Wyświetlanie footera
  display.setTextSize(1);
  display.setCursor(40, 56); // Centrowanie: (128 - 48) / 2 = 40, y=56
  display.println("/D3h420/");
  display.display();
  delay(1500); // Nagłówek i footer widoczne przez 1,5 sekundy
  initMatrix(); // Inicjalizacja kolumn
  while (millis() - startTime < 6000) { // (całość 6 sekundy)
    display.clearDisplay();
    // Wyświetlanie nagłówka
    display.setTextSize(2);
    display.setCursor(4, 0);
    display.println("WiFi Radar");
    display.setCursor(5, 0);
    display.println("WiFi Radar");
    // Wyświetlanie "scanning..."
    display.setTextSize(1);
    display.setCursor(31, 16); // Centrowanie: (128 - 66) / 2 = 31, y=16
    display.println("scanning...");
    // Wyświetlanie footera
    display.setCursor(40, 56);
    display.println("/D3h420/");
    // Aktualizacja i rysowanie kolumn
    for (int i = 0; i < 12; i++) {
      columns[i].y += columns[i].speed; // Aktualizacja pozycji y
      if (columns[i].y >= SCREEN_HEIGHT) { // Reset po wyjściu poza ekran
        columns[i].y = -8; // Start poza ekranem
        columns[i].symbol = getRandomChar();
        columns[i].speed = random(10, 50) / 10.0 + 1.0;
      }
      // Rysuj znak, jeśli jest w granicach ekranu
      if (columns[i].y >= 24 && columns[i].y < SCREEN_HEIGHT - 8) { // Między "scanning..." a footerem
        display.setCursor(columns[i].x, (int)columns[i].y);
        display.print(columns[i].symbol);
      }
    }
    display.display();
    delay(30); // ~33 FPS dla płynnej animacji
  }
}

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("Inicjalizacja...");
  randomSeed(analogRead(0)); // Inicjalizacja generatora losowego

  // Inicjalizacja OLED
  Wire.begin(D2, D1);  // I2C: D2 (SDA), D1 (SCL)
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println("❌ Błąd inicjalizacji OLED!");
    while (true);
  }

  // Wyświetlanie logo
  display.clearDisplay();
  display.drawBitmap(0, 0, wifi_logo, SCREEN_WIDTH, SCREEN_HEIGHT, SSD1306_WHITE);
  display.display();
  Serial.println("Wyświetlono logo intro");
  delay(3000);  // Logo wyświetlane przez 3 sekundy

  // Wyświetlenie animacji Matrix
  matrixAnimation();
  Serial.println("Wyświetlono animację Matrix");
  display.clearDisplay();
  display.display();

  // Inicjalizacja Wi-Fi
  WiFi.mode(WIFI_STA);
  WiFi.disconnect();
  Serial.println("Wi-Fi zainicjalizowane");
}

void scanAndDisplay() {
  display.clearDisplay();
  Serial.println("Rozpoczynanie skanowania sieci Wi-Fi...");

  // Skanowanie sieci Wi-Fi
  int networksFound = WiFi.scanNetworks();
  Serial.print("Znaleziono sieci: ");
  Serial.println(networksFound);

  if (networksFound <= 0) {
    Serial.println("❌ Brak sieci Wi-Fi w pobliżu lub błąd skanowania");
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    display.println("Brak Wi-Fi");
    display.display();
    Serial.println("Wyświetlono komunikat o braku sieci");
  } else {
    // Zapisujemy sieci
    for (int i = 0; i < networksFound && i < 6; i++) {
      networks[i].ssid = WiFi.SSID(i);
      networks[i].rssi = WiFi.RSSI(i);
      networks[i].distance = rssiToDistance(networks[i].rssi);
      Serial.print("Sieć ");
      Serial.print(i);
      Serial.print(": ");
      Serial.print(networks[i].ssid);
      Serial.print(", RSSI: ");
      Serial.print(networks[i].rssi);
      Serial.print(", Odległość: ");
      Serial.print(networks[i].distance, 1);
      Serial.println("m");
    }

    // Sortowanie sieci po odległości
    for (int i = 0; i < networksFound - 1 && i < 5; i++) {
      for (int j = i + 1; j < networksFound && j < 6; j++) {
        if (networks[i].distance > networks[j].distance) {
          WiFiInfo temp = networks[i];
          networks[i] = networks[j];
          networks[j] = temp;
        }
      }
    }

    // Wyświetlanie wyników
    display.setTextSize(1);
    display.setTextColor(SSD1306_WHITE);
    display.setCursor(0, 0);
    for (int i = 0; i < networksFound && i < 6; i++) {
      display.setCursor(0, i * 10);
      // Ograniczamy SSID do 12 znaków, aby zmieścić się na ekranie
      String displaySSID = networks[i].ssid.substring(0, 12);
      display.print(displaySSID);
      display.print(" ");
      display.print(networks[i].distance, 1);
      display.println("m");
      Serial.print("Wyświetlam sieć ");
      Serial.print(i);
      Serial.print(": ");
      Serial.println(displaySSID);
    }
    display.display();
    Serial.println("Wyświetlono listę sieci");
  }
}

void loop() {
  scanAndDisplay();
  delay(10000);  // Odświeżanie co 10 sekund
}